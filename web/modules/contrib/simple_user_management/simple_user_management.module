<?php

/**
 * @file
 * Contains simple_user_management.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\role_delegation\DelegatableRoles;

/**
 * Implements hook_help().
 *
 * @param $route_name
 *   The route.
 * @param  \Drupal\Core\Routing\RouteMatchInterface  $route_match
 *   The route matcher.
 *
 * @return string|void
 *   The help text output or void.
 */
function simple_user_management_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the simple_user_management module.
    case 'help.page.simple_user_management':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Interface for clients to manage their users.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function simple_user_management_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'user') {
    /** @var \Drupal\user\UserInterface $entity */
    /** @var \Drupal\Core\Session\AccountProxyInterface $current_user */
    $current_user = \Drupal::currentUser();

    // Add link to the new user approval form provided by this module.
    if (!$entity->isActive() && $current_user->hasPermission('approve user accounts')) {
      $operations['activate'] = [
        'title' => t('Activate'),
        'url' => Url::fromRoute("simple_user_management.user_approval_form", ['user' => $entity->id()]),
        'weight' => 50,
      ];
    }

    // Add link to role delegation if current user can delegate any roles.
    $delegatable_roles = new DelegatableRoles();
    $roles = $delegatable_roles->getAssignableRoles($current_user);
    if ($roles) {
      $operations['change_roles'] = [
        'title' => t('Change roles'),
        'url' => Url::fromRoute("role_delegation.edit_form", ['user' => $entity->id()]),
        'weight' => 55,
      ];

      // Add link to the user deactivation form provided by this module.
      if ($entity->isActive() && $current_user->hasPermission('deactivate user accounts')) {

        // Only allow deactivation if the logged in user has permission to
        // delegate all roles that the user being checked has.
        $allow_deactivation = TRUE;
        $user_roles = $entity->getRoles();
        foreach ($user_roles as $user_role) {
          if ($user_role != 'authenticated' && !in_array($user_role, array_keys($roles))) {
            $allow_deactivation = FALSE;
          }
        }

        // If logged in user can deactivate the user being checked.
        if ($allow_deactivation) {
          $operations['deactivate'] = [
            'title'  => t('Deactivate'),
            'url'    => Url::fromRoute("simple_user_management.user_deactivate_form",
              ['user' => $entity->id()]),
            'weight' => 60,
          ];
        }
      }
    }

    // Add link to cancel account.
    if ($current_user->hasPermission('administer users')) {
      $operations['cancel'] = [
        'title' => t('Cancel account'),
        'url' => Url::fromRoute("entity.user.cancel_form", ['user' => $entity->id()]),
        'weight' => 60,
      ];
    }
  }
}
